;; main contains multiple manipulators
;; each manipulator has a description and multiple rules

;; main                -> {:main [{:des "..." :rules [rule1 rule2 ...]}]}
;; manipulator         -> {:des "..." :rules [rule1 rule2 ...]}
;; manipulator's rules -> [rule1 rule2 ...]
;; define application identifiers
{
 ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#profiles
 :profiles
 {:goku {:default true ; 
         :alone   200 ; hold for .. ms to register single tap
         :held    50 ; 
         :delay   50 ; basically it means time after which the key press is count delayed
         :sim     100}} ; simultaneous key press threshold
 :templates {:open "open \"%s\""}
 :layers {
          :opt_mode{
                    :key :left_command :alone {:key :left_option}
                    }
          ; :caps_mode{
          ;           :key :caps_lock :alone {:key :left_control}
          ;           }
          }
 :simlayers {;; make w key a simlayer key
             ;; layers works too, but only recommended for none typing keys
             ;; like . , tab
             ;; or keys like z, which used less often
             :launch-mode {:key :w}}
 :main [ 
        {:des   "launch mode"
         :rules [:launch-mode
                 [:i [:open "/Applications/iTerm.app"]]
                 [:s [:open "/Applications/Slack.app"]]
                 [:c [:open "/Applications/Google Chrome.app"]]
                 [:m [:open "/Applications/Spotify.app"]]
                 ]}
        {:des "caps lock to left control"
         :rules [
                 [:##caps_lock :left_control nil {:alone :escape}]
                 ]
         }
        {:des "left control to caps lock"
         :rules [
                 [:##left_control :caps_lock]
                 ]
         }
        {:des "left command to left option"
         :rules [
                 [:##left_command :left_option ]
                 ]
         }
        {:des "left option to left command"
         :rules [
                 [:##left_option :left_command]
                 ]
         }
        {:des "shift space to equals"
         :rules [
                 [{:key :spacebar :modi :left_shift} [:spacebar :equal_sign :spacebar]]
                 ]
         }
        {:des "opt mode"
         :rules [
                 :opt_mode
                 [:##h :left_arrow]
                 [:##j :down_arrow]
                 [:##k :up_arrow]
                 [:##l :right_arrow]
                 ]
         }
        ]
 }
