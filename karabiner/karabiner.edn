;; main contains multiple manipulators
;; each manipulator has a description and multiple rules

;; main                -> {:main [{:des "..." :rules [rule1 rule2 ...]}]}
;; manipulator         -> {:des "..." :rules [rule1 rule2 ...]}
;; manipulator's rules -> [rule1 rule2 ...]
;; define application identifiers
{
 ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#profiles
 :profiles
 {:goku {:default true ;
         :alone   300 ; hold for .. ms to register single tap
         :held    50 ;
         :delay   50 ; basically it means time after which the key press is count delayed
         :sim     30}
  }
 :modifiers {
             ; :super-hyper [:command :shift :control :option :fn]
             :hyper [:command :shift :control :option]
             ; :cos [:command :shift :option]
             ; :cst [:command :shift :control]
             :co [:command :option]
             ; :cs [:command :shift]
             :ct [:command :control]
             :to [:control :option]
             ; :ts [:control :shift]
             ; :os [:option :shift]
             ;
             }
 :applications {;
                :browser ["com.brave.Browser", "com.google.Chrome"]
                :slack ["com.tinyspeck.slackmacgap"]
                :iterm ["com.googlecode.iterm2", "io.alacritty"]
                :spotify ["com.spotify.client"]
                :code ["com.microsoft.VSCode"]
                :jetbrains ["com.jetbrains.*"]
                ;
                }
 :devices {
           :apple [
                   {:vendor_id 1452}
                   ]
           }
 :templates {:open "open \"%s\""
             :open-a "open -a \"%s\""
             :type "osascript -e 'tell application \"System Events\" to keystroke \"%s\"'"
             :launch "osascript -e 'tell application \"%s\" to launch'"
             :paste "osascript -e 'set the clipboard to \"%s\"
             tell application \"System Events\"
             keystroke \"v\" using command down
             end tell'"
             :alfred "osascript -e 'tell application \"Alfred 4\"
             run trigger \"%s\" in workflow \"%s\" with argument \"%s\"
             end tell'"
             :km "osascript -e 'tell application \"Keyboard Maestro Engine\"
             do script \"%s\"
             end tell'"
             :application "osascript -e 'tell application \"%s\"
             try
             %s
             end try
             end tell'"
             :type-secret "osascript -e '
             set out to do shell script \"security find-generic-password -a $USER -s %s -w\"

             tell application \"System Events\" to keystroke out
             '"
             }
 :tos {;
       :emoji_picker {:key :spacebar :modi :ct} ;!CTspacebar
       :open_dev_tools {:key :i :modi :co}
       ;
       }
 :layers {
          ;          :opt_mode{
                               ;                    :key :left_command :alone {:key :left_option}
                               ;                    }
          ;          ; :caps_mode{
                                  ;          ;           :key :caps_lock :alone {:key :escape}
                                  ;          ;           }
          }
 :simlayers {;; make w key a simlayer key
             ;; layers works too, but only recommended for none typing keys
             ;; like . , tab
             ;; or keys like z, which used less often
             :0-mode {:key :0}
             :1-mode {:key :1}
             :a-mode {:key :a}
             :equal-mode {:key :equal_sign}
             :f-mode {:key :f}
             :five-mode {:key :5}
             :four-mode {:key :4}
             :g-mode {:key :g}
             :l-mode {:key :l}
             :q-mode {:key :q}
             :t-mode {:key :t}
             :b-mode {:key :b}
             :hyphen-mode {:key :hyphen}
             :m-mode {:key :m}
             :n-mode {:key :n}
             :comma-mode {:key :comma}
             :quote-mode {:key :quote}
             :r-mode {:key :r}
             :s-mode {:key :s}
             :v-mode {:key :v}
             :p-mode {:key :p}
             :semicolon-mode {:key :semicolon}
             :three-mode {:key :3}
             :tilde-mode {:key :grave_accent_and_tilde}
             :2-mode {:key :2}
             :8-mode {:key :8}
             :9-mode {:key :9}
             :w-mode {:key :w}
             :caps-lock-mode {:key :caps_lock}
             :tab-mode {:key :tab}
             :open-bracket-mode {:key :open_bracket}
             :emoji-mode {:key :z}
             :d-mode {:key :d}
             :e-mode {:key :e}
             :i-mode {:key :i}
             :spacebar-mode {:key :spacebar}
             :c-mode {:key :c}
             :u-mode {:key :u}
             :left-shift-mode {:key :left_shift}
             :left-option-mode-non-apple {:key :left_command}
             :left-command-mode-non-apple {:key :left_option}
             :js-mode {:key :period :condi ["in-js" 1]}
             }
 :main [

        {:des   "spotify volume and work stuff"
         :rules [:0-mode
                 [:hyphen [:application "spotify" "set sound volume to sound volume - 5"]]
                 [:equal_sign [:application "spotify" "set sound volume to sound volume + 5"]]
                 [:9 [:alfred "shuffle" "dhth.spotify"]] ;; spotify: turn shuffle on or off
                 [:a [:alfred "tasks_work_add"  "dhth.tasks"]]
                 [:s [:alfred "work_wiki_logs_search"  "dhth.workwiki.search"]]
                 [:p [:open "/Applications/Spotify.app"]]
                 ]}

        {:des   "work stuff"
         :rules [:1-mode
                 ; [:l [:alfred "tasks_work_list"  "dhth.tasks"]]
                 [:l [:alfred "aws_lambda_list_functions"  "dhth.aws"]]
                 [:p [:alfred "pomodoro_work_start"  "dhth.pomodoro"]]
                 ]}

        {:des   "open urls"
         :rules [:2-mode
                 [:n [:km "open: nikitas karabiner"]]
                 [:w [:open "http://127.0.0.1:8000"]]
                 [:e [:open "http://127.0.0.1:8001"]]
                 [:g [:open "https://github.com"]]
                 ; [:p [:open "https://github.com/pulls"]]
                 [:p [:alfred "pomodoro_personal_start"  "dhth.pomodoro"]]
                 [:l [:alfred "work_wiki_log"  "dhth.workwiki.search"]]
                 ]}

        {:des   "3-mode"
         :rules [:three-mode
                 [:t [:km "open: tmux_wiki"]]
                 [:c [:km "open: chrome_personal"]]
                 [:s [:km "open: setup_personal"]]
                 [:m [:open "/Applications/Spotify.app"]]
                 ]}

        {:des "8 mode"
         :rules [:8-mode
                 [:t [:alfred "timestamp_convert" "dhth.utils"]]
                 [:a [:alfred "aws_apigateway_list_apis"  "dhth.aws"]]
                 ]
         }

        {:des   "9-mode"
         :rules [:9-mode
                 [:a [:alfred "add_url_to_work_wiki"  "dhth.bookmarks"]]
                 [:s [:alfred "aws_s3_list_buckets"  "dhth.aws"]]
                 ]}

        {:des   "four mode"
         :rules [:four-mode
                 [:c [:km "open: chrome_work"]]
                 [:s [:km "open: setup_work"]]
                 [:j [:alfred "jira_search"  "dhth.jira"]]
                 [:b [:alfred "jira_sprint_board" "dhth.jira"]]
                 ; [:j [:alfred "jira_manager"  "dhth.tools"]]
                 ]}

        {:des   "launch/switch to applications"
         :rules [:five-mode
                 [:p [:open "https://github.com/pulls"]]
                 [:k [:open "/Applications/Keyboard Maestro.app"]]
                 ]}

        {:des   "a mode"
         :rules [:a-mode
                 [:s [:alfred "aws"  "dhth.aws"]]  ;; aws services search
                 ; [:c [:alfred "aws_cf_user_guide"  "dhth.aws.cloudformation.userguide"]]  ;; aws cf user guide search
                 [:f [:!Ta :z] :iterm] ;; tmux prefix + z
                 [:l [:!Ta :n] :iterm] ;; tmux prefix + n
                 [:h [:!Ta :p] :iterm] ;; tmux prefix + p
                 [:j [:!Ta :j] :iterm] ;; tmux prefix + j
                 [:k [:!Ta :k] :iterm] ;; tmux prefix + k
                 [:n [:!Ta :n] :iterm] ;; tmux prefix + n
                 [:c [:!Ta :c] :iterm] ;; tmux prefix + c
                 [:z [:!Ta :z] :iterm] ;; tmux prefix + z
                 [:open_bracket [:!Ta :open_bracket] :iterm]
                 [:semicolon [:spacebar :t :c] :iterm] ;; vim: close tab
                 [:h :!SCopen_bracket :browser] ;; chrome previous tab
                 [:l :!SCclose_bracket :browser] ;; chrome next tab
                 [:h :!SCopen_bracket :code]
                 [:l :!SCclose_bracket :code]
                 [:w [:alfred "add_url_to_wiki" "dhth.bookmarks"]]
                 [:right_option [:open "/Applications/Slack.app"]]
                 [:b [:alfred "wiki_add_book" "dhth.wiki.search"]]
                 ]}

                 {:des   "b-mode"
                  :rules [:b-mode
                          [:t [:alfred "bookmark_tag_search"  "dhth.bookmarks"]]
                          [:k [:alfred "search_books"  "dhth.files"]]
                          [:g [:alfred "blog_post"  "dhth.blog"]]
                          ; [:l [:!Ssemicolon :!S1 :b :l :a :c :k :spacebar :period] :iterm]
                          [:o [:spacebar :b :o ] :iterm ]
                          [:c [:spacebar :b :c ] :iterm ] ;; vim: Telescope: buffer commits
                          [:o [:spacebar :b :o ] :code ]
                          [:o [:spacebar :b :o ] :jetbrains ]
                          [:l [:!SOCb :!Sl] :code ] ;; vscode: foam: backlinks
                          [:l [:spacebar :b :l] :iterm ] ;; vim: wiki: backlinks
                          ]}

                 {:des   "c-mode"
                  :rules [:c-mode
                          [:p [:spacebar :p :p] :iterm] ;; vim: change project
                          [:b [:spacebar :c :b] :iterm] ;; vim: check key binding: verbose nmap <leader>
                          [:p :!SOCj :browser] ;; jupyter: command palette
                          [:a [:spacebar :c :a] :iterm] ;; vim: fugitive: commit --amend
                          ; [:h :!Sopen_bracket]
                          [:l [:spacebar :c :l]] ;; vim: wiki: create link
                          [:j :open_bracket]
                          [:k :close_bracket]
                          [:r [:!Ssemicolon :!Sc :o :c :!Sr :e :s] :iterm] ;; vim: coc restart
                          [:m [:g :c :i :p] :iterm] ;; vim: commentary: inner paragraph
                          ]}

                 {:des   "d mode"
                  :rules [:d-mode
                          [:t :open_dev_tools :browser]
                          [:m :!SOd :browser] ;; dark reader
                          [:j :!Td :iterm ] ;; vim <c-d>
                          [:k :!Tu :iterm ] ;; vim <c-d>
                          [:j :!Td :jetbrains ]
                          [:k :!Tu :jetbrains ]
                          [:j :!Td :code ] ;; vim <c-d>
                          [:k :!Tu :code ] ;; vim <c-d>
                          [:o :!TOCd ] ;; toggle dato
                          [:f [:f :!Tf ] :iterm ] ;; nvim/ftplugin/markdown.vim > wiki#Helpers()
                          [:c [:spacebar :d :c] :iterm ] ;; nvim: helpers: diff with commit
                          [:f [:!SCf :!Cn ] :code ] ;; vscode: foam: new note
                          [:f :!TOCn :jetbrains ] ;; new
                          [:s [:alfred "work_wiki_file"  "dhth.workwiki.search"]]
                          [:b [:alfred "db_tables_search"  "dhth.dl"]]
                          ;; option + arrow keys
                          [:##h :!Oleft_arrow]
                          [:##j :!Odown_arrow]
                          [:##k :!Oup_arrow]
                          [:##l :!Oright_arrow]
                          ]
                  }

                 {:des   "e mode"
                  :rules [:e-mode
                          [:r [:t :!Tt ] :iterm ] ;; nvim/keys/mappings.vim > helpers#Helpers()
                          [:r [:!TOCp :v ] :jetbrains ] ;; jetbrains: project view popup menu
                          [:w [:alfred "work_wiki_search"  "dhth.workwiki.search"]]
                          [:d [:alfred "karabiner_edn"  "dhth.tools"]]
                          [:h :hyphen]
                          [:u :!Shyphen]
                          ]
                  }

                 {:des   "f mode"
                  :rules [:f-mode
                          [:h :!SCopen_bracket :iterm]
                          [:l :!SCclose_bracket :iterm]
                          [:s :!SCf :browser]  ;; full screen
                          [:s :!Cf12 :jetbrains]  ;; jetbrains: file structure
                          [:g [:!SCf :!Cg] :code]  ;; vscode: foam: show graph
                          [:a :!SCa :jetbrains] ;; find action
                          [:j [:spacebar :j :f ] :iterm ] ;; nvim/ftplugin/markdown.vim > wiki#Helpers()
                          [:k [:!Ta :z] :iterm ] ;; tmux: prefix z
                          ]}

                 {:des   "g mode"
                  :rules [:g-mode
                          [:k [:!Ssemicolon :!S1 :g :o :k :u]]
                          [:f [:!Ssemicolon :!Sg :i :t :spacebar :f :e :t :c :h] :iterm] ;; vim: Git fetch
                          [:h [:alfred "github_repo_search"  "dhth.github"]]
                          [:quote [:g :r :i :!Squote]]
                          [:8 [:alfred "github_stars_search"  "dhth.github"]] ;; github: stars
                          [:9 [:g :r :i :!S9]]
                          [:open_bracket [:g :r :i :open_bracket]]
                          [:s [:spacebar :g :s ] :iterm ]
                          [:p [:!Ssemicolon :!Sg :i :t :spacebar :p :u :s :h] :iterm ]
                          [:b [:spacebar :g :b] :iterm ] ;; vim: telescope: git branches
                          [:quote [:g :r :i :quote] :iterm ] ;; vim: replace with regiser: gri"
                          ]}

                 {:des   "l mode"
                  :rules [:l-mode
                          [:t [:!CSt] :browser] ;; browser: re-open last tab
                          ]}

                 {:des "js-mode"
                  :rules [:js-mode
                          [:a [:c :o :n :s :o :l :e :period :l :o :g :!S9 :!S0 :left_arrow]] ; -> console.log()
                          ]}

                 {:des "left-shift mode"
                  :rules [:left-shift-mode
                         [:right_shift [:open-a "Screen Sharing"]]
                          ]}

                 {:des   "m mode"
                  :rules [:m-mode
                          [:1 [:alfred "search_tracks"  "dhth.spotify"]]
                          [:2 [:alfred "search_albums"  "dhth.spotify"]]
                          [:3 [:alfred "search_artists"  "dhth.spotify"]]
                          [:4 [:alfred "search_related_artists"  "dhth.spotify"]]
                          [:5 [:alfred "search_playlists"  "dhth.spotify"]]
                          [:s [:alfred "search"  "dhth.spotify"]]
                          [:j :!TOCj ] ;; dato join meeting
                          [:l [:alfred "means_like"  "dhth.vocabulary"]]
                          [:p [:alfred "karabiner_mappings"  "dhth.karabiner"]] ;; alfred: show karabiner mappings
                          [:k [:open "/Applications/Keyboard Maestro.app"]]
                          ]}

                 {:des   "n mode"
                  :rules [:n-mode
                          [:a [:alfred "notion_omm_add"  "dhth.notion"]]
                          [:l [:alfred "notion_omm_list"  "dhth.notion"]]
                          [:s [:open "https://notion.so"]]
                          [:p [:alfred "get_current_track"  "dhth.spotify"]] ;; now playing
                          [:1 [:spacebar :t :1] :iterm] ;; vim: tab 1
                          [:2 [:spacebar :t :2] :iterm] ;; vim: tab 2
                          [:3 [:spacebar :t :3] :iterm] ;; vim: tab 3
                          [:4 [:spacebar :t :4] :iterm] ;; vim: tab 4
                          [:5 [:spacebar :t :5] :iterm] ;; vim: tab 5
                          [:6 [:spacebar :t :6] :iterm] ;; vim: tab 6
                          [:7 [:spacebar :t :7] :iterm] ;; vim: tab 7
                          [:8 [:spacebar :t :8] :iterm] ;; vim: tab 8
                          [:9 [:spacebar :t :9] :iterm] ;; vim: tab 9
                          [:0 [:spacebar :t :0] :iterm] ;; vim: tab last
                          ]}

                 {:des   "q mode"
                  :rules [:q-mode
                          [:a [:alfred "quick_task_add"  "dhth.tasks.quick"]]
                          [:l [:alfred "quick_tasks_list"  "dhth.tasks.quick"]]
                          [:s :!CS4] ;; quick screenshot
                          ]}


                 {:des   "p mode"
                  :rules [:p-mode
                          [:1 [:alfred "pomodoro_work"  "dhth.pomodoro"]]
                          [:2 [:alfred "pomodoro_personal"  "dhth.pomodoro"]]
                          [:l [:alfred "search"  "dhth.pocket"]]
                          [:a [:alfred "add"  "dhth.pocket"]]
                          ; [:r [:!Ck :v] :code] ;; vscode: markdown: open md preview to the side
                          [:r [:alfred "pull_requests" "dhth.bookmarks"]] ;; bookmarks: pull requests
                          [:i [:!Ssemicolon :!Sp :l :u :g :!Si :n :s :t :a :l :l] :iterm] ;; vim: PlugInstall
                          ; [:o [:open "/Applications/Postman.app"]]
                          ]}

                 {:des   "r mode"
                  :rules [:r-mode
                          [:a [:alfred "add" "me.westerlind.alfred.raindrop-search"]]
                          [:s [:alfred "search" "me.westerlind.alfred.raindrop-search"]]
                          [:j [:!SCf :!Cj] :code] ;; vscode: foam: run janitor
                          [:e [:spacebar :r :e] :iterm] ;; vim: telescope: resume
                          [:t [:spacebar :r :t] :iterm] ;; vim: run tests
                          [:o [:alfred "karabiner_switch" "dhth.system"]] ;; alfred: switch right opt
                          ]}

                 {:des   "s mode"
                  :rules [:s-mode
                          [:t [:alfred "search_tools"  "dhth.tools"]]
                          [:b [:alfred "search_browser_tabs"  "com.epilande.browser-tabs"]]
                          [:0 [:alfred "save_current_track"  "dhth.spotify"]]
                          [:o [:!Ssemicolon :s :o :spacebar :!S5] :iterm]
                          [:o :!SCi :jetbrains] ;; jetbrains: reload
                          [:d [:alfred "wiki_file"  "dhth.wiki.search"]]
                          [:c [:launch "Screenshot"]]
                          ; [:l :!Ts :iterm]
                          ; [:l :slash :iterm]
                          [:f :!Tf :iterm]
                          [:q [:y :s :i :w :!Squote] :iterm]
                          [:m [:spacebar :s :m] :iterm] ;; vim: telescope: coc: document_symbols
                          ; [:p [:open "/Applications/Spotify.app"]]
                          [:p [:spacebar :s :p] :iterm] ;; vim: search projects
                          [:y [:alfred "synonyms"  "dhth.vocabulary"]]
                          [:w [:!SOCs :w] :jetbrains] ;; datagrip: switch session
                          ;; shift + option + arrow keys
                          [:##h :!SOleft_arrow]
                          [:##j :!SOdown_arrow]
                          [:##k :!SOup_arrow]
                          [:##l :!SOright_arrow]
                          ]}

                 {:des   "t mode"
                  :rules [:t-mode
                          [:a [:alfred "tasks_personal_add"  "dhth.tasks"]]
                          [:l [:alfred "tasks_personal_list"  "dhth.tasks"]]
                          [:0 [:alfred "get_current_track"  "dhth.spotify"]]
                          [:m [:alfred "time"  "dhth.system"]]
                          [:b :!SCf :browser] ;; browser: toolbar visibility
                          [:r [:spacebar :t :r] :iterm] ;; vim: test results
                          [:y [:open "https://monkeytype.com"]]
                          ]}

                 {:des   "v mode"
                  :rules [:v-mode
                          [:p [:alfred "vim_plugins"  "dhth.vim.plugins"]]
                          [:h [:!Ta :h] :iterm] ;; tmux prefix + h
                          [:l [:!Ta :l] :iterm] ;; tmux prefix + l
                          [:j [:!Ta :j] :iterm] ;; tmux prefix + j
                          [:k [:!Ta :k] :iterm] ;; tmux prefix + k
                          [:n [:spacebar :v :n] :iterm] ;; vim: vnew
                          [:s [:spacebar :v :s] :iterm] ;; vim: vsplit
                          [:k [:!Ck :!Cs] :code] ;; vscode: keyboard shortcuts
                          [:c [:alfred "vocabulary"  "dhth.vocabulary"]]
                          ]}

                 {:des   "w mode"
                  :rules [:w-mode
                          [:e [:alfred "wiki_search"  "dhth.wiki.search"]]
                          ; [:c [:alfred "webcam"  "dhth.system"]]
                          [:h :!SOCh] ;; magnet previous display
                          [:l :!SOCl] ;; magnet next display
                          [:open_bracket :!TOh] ;; magnet left side
                          [:close_bracket :!TOl] ;; magnet left side
                          [:h [:!Tw :h] :iterm]
                          [:l [:!Tw :l] :iterm]
                          [:j [:!Tw :j] :iterm]
                          [:k [:!Tw :k] :iterm]
                          [:q [:!Ssemicolon :w :q] :iterm]
                          ]}

                 {:des "emoji-mode"
                  :rules [:emoji-mode
                          [:e :emoji_picker]
                          [:t [:km "emoji: thunder"] ]
                          [:x [:km "emoji: thumbs up"] ]
                          [:c [:km "emoji: check mark"] ]
                          [:0 [:km "emoji: smile"] ]
                          [:j [:km "emoji: point down"] ]
                          [:k [:km "emoji: point up"] ]
                          [:s [:alfred "zshrc"  "dhth.tools"]]
                          ;
                          ]}

                 {:des   "other stuff"
                  :rules [:equal-mode
                          [:1 [:application "Brave Browser" "set the clipboard to title of active tab of first window as text"]]
                          [:2 [:application "Brave Browser" "set the clipboard to title of active tab of second window as text"]]
                          ]}

                 {:des   "comma mode"
                  :rules [:comma-mode
                          [:s [:alfred "slack_status" "dhth.slack.status"]] ;; slack: change slack status
                          [:v [:alfred "vim_plugins" "dhth.vim.plugins"]]
                          [:c [:alfred "control" "dhth.spotify"]]
                          [:2 [:alfred "albums" "dhth.spotify"]]
                          [:5 [:alfred "playlists" "dhth.spotify"]]
                          [:6 [:alfred "recently_played" "dhth.spotify"]]
                          [:d [:alfred "devices" "dhth.spotify"]]
                          [:a [:alfred "add_track_to_playlist" "dhth.spotify"]]
                          ]}

                 {:des "spacebar"
                  :rules [:spacebar-mode
                          [:##h :!TOCleft_arrow]
                          [:##l :!TOCright_arrow]
                          [:##j :!TOCdown_arrow]
                          [:##k :!TOCup_arrow]
                          [:g [:spacebar :g :s] :iterm]
                          ; [:left_shift [:alfred "search" "dhth.bookmarks"]]
                          [:left_shift [:spacebar :equal_sign :spacebar]]
                          ]}

                 {:des   "caps_lock mode"
                  :rules [:caps-lock-mode
                          [:##h :left_arrow]
                          [:##l :right_arrow]
                          [:##j :down_arrow]
                          [:##k :up_arrow]
                          ]}

                 {:des   "tilde mode"
                  :rules [:tilde-mode
                          [:h [:km "mouse: move_left"]]
                          [:l [:km "mouse: move_right"]]
                          [:hyphen [:alfred "pause" "dhth.spotify"]]
                          [:equal_sign [:alfred "play" "dhth.spotify"]]
                          [:1 [:type-secret "praline-jingle"]]
                          [:2 [:type-secret "haven-barnyard"]]
                          [:j ["in-js" 1]]
                          [:m {:key :m :modi :hyper}]
                          ]}

                 {:des   "tab mode"
                  :rules [:tab-mode
                          [:l [:alfred "system_lock" "dhth.system"]]
                          [:s [:alfred "system_sleep" "dhth.system"]]
                          [:d [:alfred "dark_mode" "dhth.system"]]
                          [:a [:alfred "switch_audio" "dhth.system"]]
                          ]}

                 {:des   "open bracket mode"
                  :rules [:open-bracket-mode
                          [:d [:spacebar :s :y] :iterm] ;; vim: SearchDockerComposeFiles
                          [:t [:spacebar :t :f] :iterm] ;; vim: Search test files
                          [:f [:spacebar :d :k :f] :iterm] ;; vim: SearchDockerFiles
                          [:l [:spacebar :l :o] :iterm] ;; vim: search local only files
                          [:g [:spacebar :g :h] :iterm] ;; vim: git helpers
                          ]}

                 {:des   "other stuff"
                  :rules [:hyphen-mode
                          ; [:p [:application "spotify" "playpause"]]
                          ; [:open_bracket [:application "spotify" "previous track"]]
                          ; [:close_bracket [:application "spotify" "next track"]]
                          [:1 [:application "Brave Browser" "set the clipboard to URL of active tab of first window as text"]]
                          [:2 [:application "Brave Browser" "set the clipboard to URL of active tab of second window as text"]]
                          [:s [:alfred "search_drive_file" "dhth.files"]]
                          ]}

{:des   "semicolon mode"
 :rules [:semicolon-mode
         [:1 [:!Ta :1]] ;; tmux prefix + 1
         [:2 [:!Ta :2]]
         [:3 [:!Ta :3]]
         [:4 [:!Ta :4]]
         [:5 [:!Ta :5]]
         [:c [:!Ta :c]] ;; tmux prefix + c
         ]}

{:des "left_option mode non apple"
 :rules [:left-option-mode-non-apple
         [:h :!SCopen_bracket :browser]
         [:l :!SCclose_bracket :browser]
         ]}

{:des "left_command mode non apple"
 :rules [:left-command-mode-non-apple
         [:h [:!Ta :p] :iterm]
         [:l [:!Ta :n] :iterm]
         ]}

{:des "caps lock to left control" :rules [
                                          [:##caps_lock :##left_control nil {:alone :escape}]
                                          ]
 }

{:des "left control to caps lock"
 :rules [
         ; [:##left_control :caps_lock]
         [:left_control [:alfred "search"  "dhth.bookmarks"]]
         ]
 }

{:des "code"
 :rules [:code
         ; [:##left_shift :!Cp]
         [:##left_shift :##left_shift nil {
                                           :alone :!Cp}]         ;; vscode: file search
         ]}

{:des "jetbrains"
 :rules [:jetbrains
         [:##left_shift :##left_shift nil {
                                           :alone :!CSo}]         ;; jetbrains: file search
         ; [:##right_option :##right_option :!apple {
         ;                                   :alone :!Ce}]         ;; jetbrains: recent files
         ]}

{:des "not iterm"
 :rules [:!iterm
         [:##left_command :##left_command :apple {:alone [:open "/Applications/iTerm.app"]}]
         [:##left_option :##left_command :!apple {:alone [:open "/Applications/iTerm.app"]}]
         ; [:##left_option :##left_command nil {:alone [:open "/Applications/iTerm.app"]}]
         ]}

{:des "iterm"
 :rules [:iterm
         [:##left_command :##left_command :apple {:alone [:!Ts] }]
         [:##left_option :##left_command :!apple {:alone [:!Ts]}]
         ; [:##left_option :##left_command nil {:alone [:!Ts]}]
         [:##left_shift :##left_shift nil {
                                           :alone :!Tf}]         ;; fzf :Buffers
         [:##right_shift :##right_shift nil {
                                           :alone [:spacebar :w :n]}]         ;; fzf :Buffers
         ; [:##right_command :##right_command :apple {:alone [:spacebar :w :n]}] ;; fzf :Windows
         ; [:##right_option :##right_option :!apple {:alone [:spacebar :w :n]}] ;; fzf :Windows
         ; [:##right_option :##right_option :!apple {:alone [:spacebar :w :n]}] ;; fzf :Windows
         ; [:##right_command :##right_command :apple {:alone [:spacebar :w :n]}] ;; fzf :Windows
         ]}

{:des "not browser"
 :rules [:!browser
         [:##left_option :##left_option :apple {:alone [:open "/Applications/Brave Browser.app"]}]
         [:##left_command :##left_option :!apple {:alone [:open "/Applications/Brave Browser.app"]}]
         ; [:##left_command :##left_option nil {:alone [:open "/Applications/Brave Browser.app"]}]
         ]
 }

{:des "browser"
 :rules [:browser
         [:##left_option :##left_option :apple {:alone [:s :t]}] ;; vimium show open tabs
         [:##left_command :##left_option :!apple {:alone [:s :t]}] ;; vimium show open tabs
         ; [:##left_command :##left_option nil {:alone [:!St]}] ;; vimium show open tabs
         ; [:##right_option :##right_option :!apple {:alone :!Ct}] ;; new tab
         ]
 }

{:des "spotify"
 :rules [
         [:##right_control :right_control :!apple {:alone [:open "/Applications/Slack.app"]}]
         [:##right_option :right_option :apple {:alone [:open "/Applications/Slack.app"]}]
         ]
 }

{:des "vscode"
 :rules [:code
         ; [:##right_shift :##right_shift nil {:alone [:!SCp]}] ;; vscode command palette
         [:##right_option :##right_option nil {:alone [:!SCp]}] ;; vscode command palette
         [:##right_command :##right_command :apple {:alone [:!SCp]}] ;; vscode command palette
         ]
 }

{:des "shifts"
 :rules [
         [:##left_shift :left_shift nil {:alone :!Oleft_arrow}]
         ]
 }

{:des "vs code"
 :rules [
         [:##right_option :##right_option nil {:alone [:open "/Applications/Visual Studio Code.app"]}]
         [:##right_command :##right_command :apple {:alone [:open "/Applications/Visual Studio Code.app"]}]
         ]
 }

]
}
;; rule [:period ["media-mode" 1] nil {:afterup ["media-mode" 0] :alone :period}]
;;       |_____| |_______________| |_| |_________________________________________|
;;        <from>    <to>      <conditions>         <other options>

;; !  | means mandatory
;; #  | means optional
;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift
;;
;; !! | mandatory command + control + optional + shift (hyper)
;; ## | optional any
;;
